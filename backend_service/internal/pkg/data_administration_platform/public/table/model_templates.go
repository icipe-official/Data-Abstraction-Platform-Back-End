//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ModelTemplates = newModelTemplatesTable("public", "model_templates", "")

type modelTemplatesTable struct {
	postgres.Table

	// Columns
	ID                  postgres.ColumnString
	ProjectID           postgres.ColumnString
	DirectoryID         postgres.ColumnString
	TemplateName        postgres.ColumnString
	DataName            postgres.ColumnString
	Description         postgres.ColumnString
	ModelTemplate       postgres.ColumnString
	CreatedOn           postgres.ColumnTimestampz
	LastUpdatedOn       postgres.ColumnTimestampz
	VerificationQuorum  postgres.ColumnInteger
	CanPublicView       postgres.ColumnBool
	ModelTemplateVector postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ModelTemplatesTable struct {
	modelTemplatesTable

	EXCLUDED modelTemplatesTable
}

// AS creates new ModelTemplatesTable with assigned alias
func (a ModelTemplatesTable) AS(alias string) *ModelTemplatesTable {
	return newModelTemplatesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ModelTemplatesTable with assigned schema name
func (a ModelTemplatesTable) FromSchema(schemaName string) *ModelTemplatesTable {
	return newModelTemplatesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ModelTemplatesTable with assigned table prefix
func (a ModelTemplatesTable) WithPrefix(prefix string) *ModelTemplatesTable {
	return newModelTemplatesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ModelTemplatesTable with assigned table suffix
func (a ModelTemplatesTable) WithSuffix(suffix string) *ModelTemplatesTable {
	return newModelTemplatesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newModelTemplatesTable(schemaName, tableName, alias string) *ModelTemplatesTable {
	return &ModelTemplatesTable{
		modelTemplatesTable: newModelTemplatesTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newModelTemplatesTableImpl("", "excluded", ""),
	}
}

func newModelTemplatesTableImpl(schemaName, tableName, alias string) modelTemplatesTable {
	var (
		IDColumn                  = postgres.StringColumn("id")
		ProjectIDColumn           = postgres.StringColumn("project_id")
		DirectoryIDColumn         = postgres.StringColumn("directory_id")
		TemplateNameColumn        = postgres.StringColumn("template_name")
		DataNameColumn            = postgres.StringColumn("data_name")
		DescriptionColumn         = postgres.StringColumn("description")
		ModelTemplateColumn       = postgres.StringColumn("model_template")
		CreatedOnColumn           = postgres.TimestampzColumn("created_on")
		LastUpdatedOnColumn       = postgres.TimestampzColumn("last_updated_on")
		VerificationQuorumColumn  = postgres.IntegerColumn("verification_quorum")
		CanPublicViewColumn       = postgres.BoolColumn("can_public_view")
		ModelTemplateVectorColumn = postgres.StringColumn("model_template_vector")
		allColumns                = postgres.ColumnList{IDColumn, ProjectIDColumn, DirectoryIDColumn, TemplateNameColumn, DataNameColumn, DescriptionColumn, ModelTemplateColumn, CreatedOnColumn, LastUpdatedOnColumn, VerificationQuorumColumn, CanPublicViewColumn, ModelTemplateVectorColumn}
		mutableColumns            = postgres.ColumnList{ProjectIDColumn, DirectoryIDColumn, TemplateNameColumn, DataNameColumn, DescriptionColumn, ModelTemplateColumn, CreatedOnColumn, LastUpdatedOnColumn, VerificationQuorumColumn, CanPublicViewColumn, ModelTemplateVectorColumn}
	)

	return modelTemplatesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                  IDColumn,
		ProjectID:           ProjectIDColumn,
		DirectoryID:         DirectoryIDColumn,
		TemplateName:        TemplateNameColumn,
		DataName:            DataNameColumn,
		Description:         DescriptionColumn,
		ModelTemplate:       ModelTemplateColumn,
		CreatedOn:           CreatedOnColumn,
		LastUpdatedOn:       LastUpdatedOnColumn,
		VerificationQuorum:  VerificationQuorumColumn,
		CanPublicView:       CanPublicViewColumn,
		ModelTemplateVector: ModelTemplateVectorColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
