//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AbstractionReviewsComments = newAbstractionReviewsCommentsTable("public", "abstraction_reviews_comments", "")

type abstractionReviewsCommentsTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnString
	AbstractionID postgres.ColumnString
	DirectoryID   postgres.ColumnString
	Comment       postgres.ColumnString
	CreatedOn     postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AbstractionReviewsCommentsTable struct {
	abstractionReviewsCommentsTable

	EXCLUDED abstractionReviewsCommentsTable
}

// AS creates new AbstractionReviewsCommentsTable with assigned alias
func (a AbstractionReviewsCommentsTable) AS(alias string) *AbstractionReviewsCommentsTable {
	return newAbstractionReviewsCommentsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AbstractionReviewsCommentsTable with assigned schema name
func (a AbstractionReviewsCommentsTable) FromSchema(schemaName string) *AbstractionReviewsCommentsTable {
	return newAbstractionReviewsCommentsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AbstractionReviewsCommentsTable with assigned table prefix
func (a AbstractionReviewsCommentsTable) WithPrefix(prefix string) *AbstractionReviewsCommentsTable {
	return newAbstractionReviewsCommentsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AbstractionReviewsCommentsTable with assigned table suffix
func (a AbstractionReviewsCommentsTable) WithSuffix(suffix string) *AbstractionReviewsCommentsTable {
	return newAbstractionReviewsCommentsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAbstractionReviewsCommentsTable(schemaName, tableName, alias string) *AbstractionReviewsCommentsTable {
	return &AbstractionReviewsCommentsTable{
		abstractionReviewsCommentsTable: newAbstractionReviewsCommentsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                        newAbstractionReviewsCommentsTableImpl("", "excluded", ""),
	}
}

func newAbstractionReviewsCommentsTableImpl(schemaName, tableName, alias string) abstractionReviewsCommentsTable {
	var (
		IDColumn            = postgres.StringColumn("id")
		AbstractionIDColumn = postgres.StringColumn("abstraction_id")
		DirectoryIDColumn   = postgres.StringColumn("directory_id")
		CommentColumn       = postgres.StringColumn("comment")
		CreatedOnColumn     = postgres.TimestampzColumn("created_on")
		allColumns          = postgres.ColumnList{IDColumn, AbstractionIDColumn, DirectoryIDColumn, CommentColumn, CreatedOnColumn}
		mutableColumns      = postgres.ColumnList{AbstractionIDColumn, DirectoryIDColumn, CommentColumn, CreatedOnColumn}
	)

	return abstractionReviewsCommentsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		AbstractionID: AbstractionIDColumn,
		DirectoryID:   DirectoryIDColumn,
		Comment:       CommentColumn,
		CreatedOn:     CreatedOnColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
