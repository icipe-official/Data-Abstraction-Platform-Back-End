//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Catalogue = newCatalogueTable("public", "catalogue", "")

type catalogueTable struct {
	postgres.Table

	// Columns
	ID              postgres.ColumnString
	ProjectID       postgres.ColumnString
	DirectoryID     postgres.ColumnString
	Name            postgres.ColumnString
	Description     postgres.ColumnString
	Catalogue       postgres.ColumnString
	CreatedOn       postgres.ColumnTimestampz
	LastUpdatedOn   postgres.ColumnTimestampz
	CanPublicView   postgres.ColumnBool
	CatalogueVector postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CatalogueTable struct {
	catalogueTable

	EXCLUDED catalogueTable
}

// AS creates new CatalogueTable with assigned alias
func (a CatalogueTable) AS(alias string) *CatalogueTable {
	return newCatalogueTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CatalogueTable with assigned schema name
func (a CatalogueTable) FromSchema(schemaName string) *CatalogueTable {
	return newCatalogueTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CatalogueTable with assigned table prefix
func (a CatalogueTable) WithPrefix(prefix string) *CatalogueTable {
	return newCatalogueTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CatalogueTable with assigned table suffix
func (a CatalogueTable) WithSuffix(suffix string) *CatalogueTable {
	return newCatalogueTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCatalogueTable(schemaName, tableName, alias string) *CatalogueTable {
	return &CatalogueTable{
		catalogueTable: newCatalogueTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newCatalogueTableImpl("", "excluded", ""),
	}
}

func newCatalogueTableImpl(schemaName, tableName, alias string) catalogueTable {
	var (
		IDColumn              = postgres.StringColumn("id")
		ProjectIDColumn       = postgres.StringColumn("project_id")
		DirectoryIDColumn     = postgres.StringColumn("directory_id")
		NameColumn            = postgres.StringColumn("name")
		DescriptionColumn     = postgres.StringColumn("description")
		CatalogueColumn       = postgres.StringColumn("catalogue")
		CreatedOnColumn       = postgres.TimestampzColumn("created_on")
		LastUpdatedOnColumn   = postgres.TimestampzColumn("last_updated_on")
		CanPublicViewColumn   = postgres.BoolColumn("can_public_view")
		CatalogueVectorColumn = postgres.StringColumn("catalogue_vector")
		allColumns            = postgres.ColumnList{IDColumn, ProjectIDColumn, DirectoryIDColumn, NameColumn, DescriptionColumn, CatalogueColumn, CreatedOnColumn, LastUpdatedOnColumn, CanPublicViewColumn, CatalogueVectorColumn}
		mutableColumns        = postgres.ColumnList{ProjectIDColumn, DirectoryIDColumn, NameColumn, DescriptionColumn, CatalogueColumn, CreatedOnColumn, LastUpdatedOnColumn, CanPublicViewColumn, CatalogueVectorColumn}
	)

	return catalogueTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		ProjectID:       ProjectIDColumn,
		DirectoryID:     DirectoryIDColumn,
		Name:            NameColumn,
		Description:     DescriptionColumn,
		Catalogue:       CatalogueColumn,
		CreatedOn:       CreatedOnColumn,
		LastUpdatedOn:   LastUpdatedOnColumn,
		CanPublicView:   CanPublicViewColumn,
		CatalogueVector: CatalogueVectorColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
