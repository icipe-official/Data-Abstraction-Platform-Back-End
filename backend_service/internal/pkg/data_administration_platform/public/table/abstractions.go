//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Abstractions = newAbstractionsTable("public", "abstractions", "")

type abstractionsTable struct {
	postgres.Table

	// Columns
	ID              postgres.ColumnString
	ModelTemplateID postgres.ColumnString
	FileID          postgres.ColumnString
	DirectoryID     postgres.ColumnString
	ProjectID       postgres.ColumnString
	Tags            postgres.ColumnString
	Abstraction     postgres.ColumnString
	IsVerified      postgres.ColumnBool
	CreatedOn       postgres.ColumnTimestampz
	LastUpdatedOn   postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AbstractionsTable struct {
	abstractionsTable

	EXCLUDED abstractionsTable
}

// AS creates new AbstractionsTable with assigned alias
func (a AbstractionsTable) AS(alias string) *AbstractionsTable {
	return newAbstractionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AbstractionsTable with assigned schema name
func (a AbstractionsTable) FromSchema(schemaName string) *AbstractionsTable {
	return newAbstractionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AbstractionsTable with assigned table prefix
func (a AbstractionsTable) WithPrefix(prefix string) *AbstractionsTable {
	return newAbstractionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AbstractionsTable with assigned table suffix
func (a AbstractionsTable) WithSuffix(suffix string) *AbstractionsTable {
	return newAbstractionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAbstractionsTable(schemaName, tableName, alias string) *AbstractionsTable {
	return &AbstractionsTable{
		abstractionsTable: newAbstractionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newAbstractionsTableImpl("", "excluded", ""),
	}
}

func newAbstractionsTableImpl(schemaName, tableName, alias string) abstractionsTable {
	var (
		IDColumn              = postgres.StringColumn("id")
		ModelTemplateIDColumn = postgres.StringColumn("model_template_id")
		FileIDColumn          = postgres.StringColumn("file_id")
		DirectoryIDColumn     = postgres.StringColumn("directory_id")
		ProjectIDColumn       = postgres.StringColumn("project_id")
		TagsColumn            = postgres.StringColumn("tags")
		AbstractionColumn     = postgres.StringColumn("abstraction")
		IsVerifiedColumn      = postgres.BoolColumn("is_verified")
		CreatedOnColumn       = postgres.TimestampzColumn("created_on")
		LastUpdatedOnColumn   = postgres.TimestampzColumn("last_updated_on")
		allColumns            = postgres.ColumnList{IDColumn, ModelTemplateIDColumn, FileIDColumn, DirectoryIDColumn, ProjectIDColumn, TagsColumn, AbstractionColumn, IsVerifiedColumn, CreatedOnColumn, LastUpdatedOnColumn}
		mutableColumns        = postgres.ColumnList{ModelTemplateIDColumn, FileIDColumn, DirectoryIDColumn, ProjectIDColumn, TagsColumn, AbstractionColumn, IsVerifiedColumn, CreatedOnColumn, LastUpdatedOnColumn}
	)

	return abstractionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		ModelTemplateID: ModelTemplateIDColumn,
		FileID:          FileIDColumn,
		DirectoryID:     DirectoryIDColumn,
		ProjectID:       ProjectIDColumn,
		Tags:            TagsColumn,
		Abstraction:     AbstractionColumn,
		IsVerified:      IsVerifiedColumn,
		CreatedOn:       CreatedOnColumn,
		LastUpdatedOn:   LastUpdatedOnColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
