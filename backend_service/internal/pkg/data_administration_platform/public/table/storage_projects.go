//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var StorageProjects = newStorageProjectsTable("public", "storage_projects", "")

type storageProjectsTable struct {
	postgres.Table

	// Columns
	StorageID postgres.ColumnString
	ProjectID postgres.ColumnString
	CreatedOn postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type StorageProjectsTable struct {
	storageProjectsTable

	EXCLUDED storageProjectsTable
}

// AS creates new StorageProjectsTable with assigned alias
func (a StorageProjectsTable) AS(alias string) *StorageProjectsTable {
	return newStorageProjectsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new StorageProjectsTable with assigned schema name
func (a StorageProjectsTable) FromSchema(schemaName string) *StorageProjectsTable {
	return newStorageProjectsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new StorageProjectsTable with assigned table prefix
func (a StorageProjectsTable) WithPrefix(prefix string) *StorageProjectsTable {
	return newStorageProjectsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new StorageProjectsTable with assigned table suffix
func (a StorageProjectsTable) WithSuffix(suffix string) *StorageProjectsTable {
	return newStorageProjectsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newStorageProjectsTable(schemaName, tableName, alias string) *StorageProjectsTable {
	return &StorageProjectsTable{
		storageProjectsTable: newStorageProjectsTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newStorageProjectsTableImpl("", "excluded", ""),
	}
}

func newStorageProjectsTableImpl(schemaName, tableName, alias string) storageProjectsTable {
	var (
		StorageIDColumn = postgres.StringColumn("storage_id")
		ProjectIDColumn = postgres.StringColumn("project_id")
		CreatedOnColumn = postgres.TimestampzColumn("created_on")
		allColumns      = postgres.ColumnList{StorageIDColumn, ProjectIDColumn, CreatedOnColumn}
		mutableColumns  = postgres.ColumnList{CreatedOnColumn}
	)

	return storageProjectsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		StorageID: StorageIDColumn,
		ProjectID: ProjectIDColumn,
		CreatedOn: CreatedOnColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
