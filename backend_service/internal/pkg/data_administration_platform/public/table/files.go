//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Files = newFilesTable("public", "files", "")

type filesTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	StorageID   postgres.ColumnString
	ProjectID   postgres.ColumnString
	DirectoryID postgres.ColumnString
	ContentType postgres.ColumnString
	Tags        postgres.ColumnString
	CreatedOn   postgres.ColumnTimestampz
	FileVector  postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FilesTable struct {
	filesTable

	EXCLUDED filesTable
}

// AS creates new FilesTable with assigned alias
func (a FilesTable) AS(alias string) *FilesTable {
	return newFilesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FilesTable with assigned schema name
func (a FilesTable) FromSchema(schemaName string) *FilesTable {
	return newFilesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FilesTable with assigned table prefix
func (a FilesTable) WithPrefix(prefix string) *FilesTable {
	return newFilesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FilesTable with assigned table suffix
func (a FilesTable) WithSuffix(suffix string) *FilesTable {
	return newFilesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFilesTable(schemaName, tableName, alias string) *FilesTable {
	return &FilesTable{
		filesTable: newFilesTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newFilesTableImpl("", "excluded", ""),
	}
}

func newFilesTableImpl(schemaName, tableName, alias string) filesTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		StorageIDColumn   = postgres.StringColumn("storage_id")
		ProjectIDColumn   = postgres.StringColumn("project_id")
		DirectoryIDColumn = postgres.StringColumn("directory_id")
		ContentTypeColumn = postgres.StringColumn("content_type")
		TagsColumn        = postgres.StringColumn("tags")
		CreatedOnColumn   = postgres.TimestampzColumn("created_on")
		FileVectorColumn  = postgres.StringColumn("file_vector")
		allColumns        = postgres.ColumnList{IDColumn, StorageIDColumn, ProjectIDColumn, DirectoryIDColumn, ContentTypeColumn, TagsColumn, CreatedOnColumn, FileVectorColumn}
		mutableColumns    = postgres.ColumnList{StorageIDColumn, ProjectIDColumn, DirectoryIDColumn, ContentTypeColumn, TagsColumn, CreatedOnColumn, FileVectorColumn}
	)

	return filesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		StorageID:   StorageIDColumn,
		ProjectID:   ProjectIDColumn,
		DirectoryID: DirectoryIDColumn,
		ContentType: ContentTypeColumn,
		Tags:        TagsColumn,
		CreatedOn:   CreatedOnColumn,
		FileVector:  FileVectorColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
