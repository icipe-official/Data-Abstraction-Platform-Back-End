//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Directory = newDirectoryTable("public", "directory", "")

type directoryTable struct {
	postgres.Table

	// Columns
	ID              postgres.ColumnString
	Name            postgres.ColumnString
	Contacts        postgres.ColumnString
	CreatedOn       postgres.ColumnTimestampz
	LastUpdatedOn   postgres.ColumnTimestampz
	DirectoryVector postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type DirectoryTable struct {
	directoryTable

	EXCLUDED directoryTable
}

// AS creates new DirectoryTable with assigned alias
func (a DirectoryTable) AS(alias string) *DirectoryTable {
	return newDirectoryTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DirectoryTable with assigned schema name
func (a DirectoryTable) FromSchema(schemaName string) *DirectoryTable {
	return newDirectoryTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DirectoryTable with assigned table prefix
func (a DirectoryTable) WithPrefix(prefix string) *DirectoryTable {
	return newDirectoryTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DirectoryTable with assigned table suffix
func (a DirectoryTable) WithSuffix(suffix string) *DirectoryTable {
	return newDirectoryTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDirectoryTable(schemaName, tableName, alias string) *DirectoryTable {
	return &DirectoryTable{
		directoryTable: newDirectoryTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newDirectoryTableImpl("", "excluded", ""),
	}
}

func newDirectoryTableImpl(schemaName, tableName, alias string) directoryTable {
	var (
		IDColumn              = postgres.StringColumn("id")
		NameColumn            = postgres.StringColumn("name")
		ContactsColumn        = postgres.StringColumn("contacts")
		CreatedOnColumn       = postgres.TimestampzColumn("created_on")
		LastUpdatedOnColumn   = postgres.TimestampzColumn("last_updated_on")
		DirectoryVectorColumn = postgres.StringColumn("directory_vector")
		allColumns            = postgres.ColumnList{IDColumn, NameColumn, ContactsColumn, CreatedOnColumn, LastUpdatedOnColumn, DirectoryVectorColumn}
		mutableColumns        = postgres.ColumnList{NameColumn, ContactsColumn, CreatedOnColumn, LastUpdatedOnColumn, DirectoryVectorColumn}
	)

	return directoryTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		Name:            NameColumn,
		Contacts:        ContactsColumn,
		CreatedOn:       CreatedOnColumn,
		LastUpdatedOn:   LastUpdatedOnColumn,
		DirectoryVector: DirectoryVectorColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
