//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var DirectoryIam = newDirectoryIamTable("public", "directory_iam", "")

type directoryIamTable struct {
	postgres.Table

	// Columns
	DirectoryID          postgres.ColumnString
	Email                postgres.ColumnString
	Password             postgres.ColumnString
	IsEmailVerified      postgres.ColumnBool
	DirectoryIamTicketID postgres.ColumnString
	TicketNumber         postgres.ColumnString
	Pin                  postgres.ColumnString
	CreatedOn            postgres.ColumnTimestampz
	LastUpdatedOn        postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type DirectoryIamTable struct {
	directoryIamTable

	EXCLUDED directoryIamTable
}

// AS creates new DirectoryIamTable with assigned alias
func (a DirectoryIamTable) AS(alias string) *DirectoryIamTable {
	return newDirectoryIamTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DirectoryIamTable with assigned schema name
func (a DirectoryIamTable) FromSchema(schemaName string) *DirectoryIamTable {
	return newDirectoryIamTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DirectoryIamTable with assigned table prefix
func (a DirectoryIamTable) WithPrefix(prefix string) *DirectoryIamTable {
	return newDirectoryIamTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DirectoryIamTable with assigned table suffix
func (a DirectoryIamTable) WithSuffix(suffix string) *DirectoryIamTable {
	return newDirectoryIamTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDirectoryIamTable(schemaName, tableName, alias string) *DirectoryIamTable {
	return &DirectoryIamTable{
		directoryIamTable: newDirectoryIamTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newDirectoryIamTableImpl("", "excluded", ""),
	}
}

func newDirectoryIamTableImpl(schemaName, tableName, alias string) directoryIamTable {
	var (
		DirectoryIDColumn          = postgres.StringColumn("directory_id")
		EmailColumn                = postgres.StringColumn("email")
		PasswordColumn             = postgres.StringColumn("password")
		IsEmailVerifiedColumn      = postgres.BoolColumn("is_email_verified")
		DirectoryIamTicketIDColumn = postgres.StringColumn("directory_iam_ticket_id")
		TicketNumberColumn         = postgres.StringColumn("ticket_number")
		PinColumn                  = postgres.StringColumn("pin")
		CreatedOnColumn            = postgres.TimestampzColumn("created_on")
		LastUpdatedOnColumn        = postgres.TimestampzColumn("last_updated_on")
		allColumns                 = postgres.ColumnList{DirectoryIDColumn, EmailColumn, PasswordColumn, IsEmailVerifiedColumn, DirectoryIamTicketIDColumn, TicketNumberColumn, PinColumn, CreatedOnColumn, LastUpdatedOnColumn}
		mutableColumns             = postgres.ColumnList{EmailColumn, PasswordColumn, IsEmailVerifiedColumn, DirectoryIamTicketIDColumn, TicketNumberColumn, PinColumn, CreatedOnColumn, LastUpdatedOnColumn}
	)

	return directoryIamTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		DirectoryID:          DirectoryIDColumn,
		Email:                EmailColumn,
		Password:             PasswordColumn,
		IsEmailVerified:      IsEmailVerifiedColumn,
		DirectoryIamTicketID: DirectoryIamTicketIDColumn,
		TicketNumber:         TicketNumberColumn,
		Pin:                  PinColumn,
		CreatedOn:            CreatedOnColumn,
		LastUpdatedOn:        LastUpdatedOnColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
