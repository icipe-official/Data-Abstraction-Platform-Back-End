//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var StorageTypes = newStorageTypesTable("public", "storage_types", "")

type storageTypesTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnString
	Properties postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type StorageTypesTable struct {
	storageTypesTable

	EXCLUDED storageTypesTable
}

// AS creates new StorageTypesTable with assigned alias
func (a StorageTypesTable) AS(alias string) *StorageTypesTable {
	return newStorageTypesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new StorageTypesTable with assigned schema name
func (a StorageTypesTable) FromSchema(schemaName string) *StorageTypesTable {
	return newStorageTypesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new StorageTypesTable with assigned table prefix
func (a StorageTypesTable) WithPrefix(prefix string) *StorageTypesTable {
	return newStorageTypesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new StorageTypesTable with assigned table suffix
func (a StorageTypesTable) WithSuffix(suffix string) *StorageTypesTable {
	return newStorageTypesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newStorageTypesTable(schemaName, tableName, alias string) *StorageTypesTable {
	return &StorageTypesTable{
		storageTypesTable: newStorageTypesTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newStorageTypesTableImpl("", "excluded", ""),
	}
}

func newStorageTypesTableImpl(schemaName, tableName, alias string) storageTypesTable {
	var (
		IDColumn         = postgres.StringColumn("id")
		PropertiesColumn = postgres.StringColumn("properties")
		allColumns       = postgres.ColumnList{IDColumn, PropertiesColumn}
		mutableColumns   = postgres.ColumnList{PropertiesColumn}
	)

	return storageTypesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Properties: PropertiesColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
