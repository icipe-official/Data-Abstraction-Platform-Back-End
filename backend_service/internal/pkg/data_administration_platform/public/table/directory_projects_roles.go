//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var DirectoryProjectsRoles = newDirectoryProjectsRolesTable("public", "directory_projects_roles", "")

type directoryProjectsRolesTable struct {
	postgres.Table

	// Columns
	DirectoryID   postgres.ColumnString
	ProjectID     postgres.ColumnString
	ProjectRoleID postgres.ColumnString
	CreatedOn     postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type DirectoryProjectsRolesTable struct {
	directoryProjectsRolesTable

	EXCLUDED directoryProjectsRolesTable
}

// AS creates new DirectoryProjectsRolesTable with assigned alias
func (a DirectoryProjectsRolesTable) AS(alias string) *DirectoryProjectsRolesTable {
	return newDirectoryProjectsRolesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DirectoryProjectsRolesTable with assigned schema name
func (a DirectoryProjectsRolesTable) FromSchema(schemaName string) *DirectoryProjectsRolesTable {
	return newDirectoryProjectsRolesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DirectoryProjectsRolesTable with assigned table prefix
func (a DirectoryProjectsRolesTable) WithPrefix(prefix string) *DirectoryProjectsRolesTable {
	return newDirectoryProjectsRolesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DirectoryProjectsRolesTable with assigned table suffix
func (a DirectoryProjectsRolesTable) WithSuffix(suffix string) *DirectoryProjectsRolesTable {
	return newDirectoryProjectsRolesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDirectoryProjectsRolesTable(schemaName, tableName, alias string) *DirectoryProjectsRolesTable {
	return &DirectoryProjectsRolesTable{
		directoryProjectsRolesTable: newDirectoryProjectsRolesTableImpl(schemaName, tableName, alias),
		EXCLUDED:                    newDirectoryProjectsRolesTableImpl("", "excluded", ""),
	}
}

func newDirectoryProjectsRolesTableImpl(schemaName, tableName, alias string) directoryProjectsRolesTable {
	var (
		DirectoryIDColumn   = postgres.StringColumn("directory_id")
		ProjectIDColumn     = postgres.StringColumn("project_id")
		ProjectRoleIDColumn = postgres.StringColumn("project_role_id")
		CreatedOnColumn     = postgres.TimestampzColumn("created_on")
		allColumns          = postgres.ColumnList{DirectoryIDColumn, ProjectIDColumn, ProjectRoleIDColumn, CreatedOnColumn}
		mutableColumns      = postgres.ColumnList{CreatedOnColumn}
	)

	return directoryProjectsRolesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		DirectoryID:   DirectoryIDColumn,
		ProjectID:     ProjectIDColumn,
		ProjectRoleID: ProjectRoleIDColumn,
		CreatedOn:     CreatedOnColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
