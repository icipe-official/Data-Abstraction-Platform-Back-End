//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Storage = newStorageTable("public", "storage", "")

type storageTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnString
	StorageTypeID postgres.ColumnString
	Name          postgres.ColumnString
	Storage       postgres.ColumnString
	IsActive      postgres.ColumnBool
	CreatedOn     postgres.ColumnTimestampz
	LastUpdatedOn postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type StorageTable struct {
	storageTable

	EXCLUDED storageTable
}

// AS creates new StorageTable with assigned alias
func (a StorageTable) AS(alias string) *StorageTable {
	return newStorageTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new StorageTable with assigned schema name
func (a StorageTable) FromSchema(schemaName string) *StorageTable {
	return newStorageTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new StorageTable with assigned table prefix
func (a StorageTable) WithPrefix(prefix string) *StorageTable {
	return newStorageTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new StorageTable with assigned table suffix
func (a StorageTable) WithSuffix(suffix string) *StorageTable {
	return newStorageTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newStorageTable(schemaName, tableName, alias string) *StorageTable {
	return &StorageTable{
		storageTable: newStorageTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newStorageTableImpl("", "excluded", ""),
	}
}

func newStorageTableImpl(schemaName, tableName, alias string) storageTable {
	var (
		IDColumn            = postgres.StringColumn("id")
		StorageTypeIDColumn = postgres.StringColumn("storage_type_id")
		NameColumn          = postgres.StringColumn("name")
		StorageColumn       = postgres.StringColumn("storage")
		IsActiveColumn      = postgres.BoolColumn("is_active")
		CreatedOnColumn     = postgres.TimestampzColumn("created_on")
		LastUpdatedOnColumn = postgres.TimestampzColumn("last_updated_on")
		allColumns          = postgres.ColumnList{IDColumn, StorageTypeIDColumn, NameColumn, StorageColumn, IsActiveColumn, CreatedOnColumn, LastUpdatedOnColumn}
		mutableColumns      = postgres.ColumnList{StorageTypeIDColumn, NameColumn, StorageColumn, IsActiveColumn, CreatedOnColumn, LastUpdatedOnColumn}
	)

	return storageTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		StorageTypeID: StorageTypeIDColumn,
		Name:          NameColumn,
		Storage:       StorageColumn,
		IsActive:      IsActiveColumn,
		CreatedOn:     CreatedOnColumn,
		LastUpdatedOn: LastUpdatedOnColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
