//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ProjectStatistics = newProjectStatisticsTable("public", "project_statistics", "")

type projectStatisticsTable struct {
	postgres.Table

	// Columns
	ProjectID          postgres.ColumnString
	NoOfMembers        postgres.ColumnInteger
	NoOfModelTemplates postgres.ColumnInteger
	NoOfCatalogues     postgres.ColumnInteger
	NoOfFiles          postgres.ColumnInteger
	NoOfAbstractions   postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ProjectStatisticsTable struct {
	projectStatisticsTable

	EXCLUDED projectStatisticsTable
}

// AS creates new ProjectStatisticsTable with assigned alias
func (a ProjectStatisticsTable) AS(alias string) *ProjectStatisticsTable {
	return newProjectStatisticsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProjectStatisticsTable with assigned schema name
func (a ProjectStatisticsTable) FromSchema(schemaName string) *ProjectStatisticsTable {
	return newProjectStatisticsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProjectStatisticsTable with assigned table prefix
func (a ProjectStatisticsTable) WithPrefix(prefix string) *ProjectStatisticsTable {
	return newProjectStatisticsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProjectStatisticsTable with assigned table suffix
func (a ProjectStatisticsTable) WithSuffix(suffix string) *ProjectStatisticsTable {
	return newProjectStatisticsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProjectStatisticsTable(schemaName, tableName, alias string) *ProjectStatisticsTable {
	return &ProjectStatisticsTable{
		projectStatisticsTable: newProjectStatisticsTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newProjectStatisticsTableImpl("", "excluded", ""),
	}
}

func newProjectStatisticsTableImpl(schemaName, tableName, alias string) projectStatisticsTable {
	var (
		ProjectIDColumn          = postgres.StringColumn("project_id")
		NoOfMembersColumn        = postgres.IntegerColumn("no_of_members")
		NoOfModelTemplatesColumn = postgres.IntegerColumn("no_of_model_templates")
		NoOfCataloguesColumn     = postgres.IntegerColumn("no_of_catalogues")
		NoOfFilesColumn          = postgres.IntegerColumn("no_of_files")
		NoOfAbstractionsColumn   = postgres.IntegerColumn("no_of_abstractions")
		allColumns               = postgres.ColumnList{ProjectIDColumn, NoOfMembersColumn, NoOfModelTemplatesColumn, NoOfCataloguesColumn, NoOfFilesColumn, NoOfAbstractionsColumn}
		mutableColumns           = postgres.ColumnList{ProjectIDColumn, NoOfMembersColumn, NoOfModelTemplatesColumn, NoOfCataloguesColumn, NoOfFilesColumn, NoOfAbstractionsColumn}
	)

	return projectStatisticsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ProjectID:          ProjectIDColumn,
		NoOfMembers:        NoOfMembersColumn,
		NoOfModelTemplates: NoOfModelTemplatesColumn,
		NoOfCatalogues:     NoOfCataloguesColumn,
		NoOfFiles:          NoOfFilesColumn,
		NoOfAbstractions:   NoOfAbstractionsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
